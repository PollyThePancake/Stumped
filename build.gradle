plugins {
	id 'fabric-loom' version '1.1-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = "${project.mod_version}-${project.minecraft_version}"
group = project.maven_group

repositories {

	maven { url = "https://maven.minecraftforge.net/" }				// TerraBlender
	maven { url = "https://api.modrinth.com/maven" }				// Modrinth
	maven { url = 'https://jitpack.io' }							// Jitpack
	maven { url = "https://maven.shedaniel.me/" }					// ClothConfig
	maven { url = "https://maven.terraformersmc.com/releases/" }	// ModMenu
	maven { url = "https://api.modrinth.com/maven" }				// MidnightLib
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"

	// Fabric Yarn Mappings
	mappings "net.fabricmc:yarn:${project.minecraft_version}+${project.yarn_mappings}"

	// Fabric Loader
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}+${project.minecraft_version}"

	// TerraBlender
	modImplementation "com.github.glitchfiend:TerraBlender-fabric:${project.minecraft_version}-${project.terrablender_version}"
	modRuntimeOnly "com.github.glitchfiend:TerraBlender-fabric:${project.minecraft_version}-${project.terrablender_version}"

	// MixinExtras
	implementation("com.github.LlamaLad7:MixinExtras:${project.mixinextras_version}")
	annotationProcessor("com.github.LlamaLad7:MixinExtras:${project.mixinextras_version}")
	include("com.github.LlamaLad7:MixinExtras:${project.mixinextras_version}")

	// Fabric Shield Lib
	modImplementation "com.github.CrimsonDawn45:Fabric-Shield-Lib:v${project.fabric_shield_lib_version}-${project.minecraft_version}"
	include "com.github.CrimsonDawn45:Fabric-Shield-Lib:v${project.fabric_shield_lib_version}-${project.minecraft_version}"

	// Cloth Config
	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	include("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}")

	// Mod Menu
	modCompileOnly modRuntimeOnly ("com.terraformersmc:modmenu:${project.mod_menu_version}"), {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// Fabric-ASM
	modImplementation("com.github.Chocohead:Fabric-ASM:v${project.fabric_asm_version}") {
		exclude (group: "net.fabricmc.fabric-api")
	}
	include("com.github.Chocohead:Fabric-ASM:v${project.fabric_asm_version}")

	// MidnightLib
	modImplementation("maven.modrinth:midnightlib:${project.midnightlib_version}")
	include("maven.modrinth:midnightlib:${project.midnightlib_version}")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

def dataOutput = 'src/main/generated'

loom {
	runs {
		datagen {
			server()

			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file(dataOutput)}"

			runDir "build/datagen"
		}
	}
}

sourceSets { main { resources { srcDirs += dataOutput } } }

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

loom {
	accessWidenerPath = file("src/main/resources/stumped.accesswidener")
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${archivesBaseName}"}
	}
}

configurations.all {
	resolutionStrategy {
		force("net.fabricmc:fabric-loader:$loader_version")
	}
}

def void minecraft(GString gString) {}